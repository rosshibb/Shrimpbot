#include <PID_v1.h>
#include <Arduino.h>
#include "AS5600.h"
#include <Wire.h>

AS5600 as5600;

// Pins for H-bridge control
const int positivePin = 9;  // PWM pin for forward direction
const int negativePin = 10; // PWM pin for reverse direction

// PID control variables
double setpoint = 0;         // Target position (relative to zero-point)
double input = 0;            // Current position (read from AS5600)
double output = 0;           // PID output for speed and direction

///////////////////////////
// PID tuning parameters //
///////////////////////////
double Kp = 2.0, Ki = 5.0, Kd = 1.0;

// Initialize the PID controller
PID myPID(&input, &output, &setpoint, Kp, Ki, Kd, DIRECT);

///////////////////////////////////////////
// Desired angle relative to zero-point ///
///////////////////////////////////////////
double desiredAngle = 0; // Change this to set your desired angle

// Timing constants for AS5600 averaging
const int readInterval = 10;                           // Time between readings (ms)
const int averageInterval = 100;                       // Time to calculate average (ms)
const int numSamples = averageInterval / readInterval; // Number of samples in each averaging period

// Variables for calibration and averaging
unsigned long lastReadTime = 0;
unsigned long lastAverageTime = 0;
int angleSum = 0;
int sampleCount = 0;
int calAngle1 = 0, calAngle2 = 0; // Calibration points
float zeroAngle = 0;              // New zero-point in degrees

// Function to calibrate the encoder based on two known angles
void calibrate()
{
  Serial.println("Calibration: Rotate to first known angle and type 'y' to capture.");
  while (Serial.read() != 'y')
  {
  } // Wait for 'y' input
  calAngle1 = as5600.rawAngle();
  Serial.print("Captured first angle: ");
  Serial.println(calAngle1);

  delay(500); // Brief pause for user to adjust position

  Serial.println("Calibration: Rotate to second known angle and type 'y' to capture.");
  while (Serial.read() != 'y')
  {
  } // Wait for 'y' input
  calAngle2 = as5600.rawAngle();
  Serial.print("Captured second angle: ");
  Serial.println(calAngle2);

  // Calculate the midpoint between the two calibration points
  zeroAngle = ((calAngle1 + calAngle2) / 2.0) * (360.0 / 4096.0); // Convert to degrees
  Serial.print("Calibration complete. New zero-point angle: ");
  Serial.println(zeroAngle);

  // Set the PID setpoint relative to zero-point
  setpoint = desiredAngle;
  Serial.print("Desired angle (relative to zero-point): ");
  Serial.println(setpoint);
}

// Function to set the motor output
void setMotorOutput(double pwmValue)
{
  int pwmSignal = constrain(abs(pwmValue), 0, 255); // Ensure PWM is within range

  if (pwmValue > 0)
  {
    analogWrite(positivePin, pwmSignal); // Forward direction
    analogWrite(negativePin, 0);        // Stop reverse pin
  }
  else if (pwmValue < 0)
  {
    analogWrite(negativePin, pwmSignal); // Reverse direction
    analogWrite(positivePin, 0);        // Stop forward pin
  }
  else
  {
    analogWrite(positivePin, 0); // Stop both pins
    analogWrite(negativePin, 0);
  }
}

void setup()
{
  // Initialize serial communication
  Serial.begin(9600);
  while (!Serial)
  {
  };

  // Initialize the AS5600 magnetometer
  Wire.begin();
  Serial.print("Beginning: ");
  Serial.println(as5600.begin(1)); // Set direction pin.

  int connected = as5600.isConnected();
  Serial.print("Connected: ");
  Serial.println(connected);

  // Initialize the H-bridge pins
  pinMode(positivePin, OUTPUT);
  pinMode(negativePin, OUTPUT);

  // Prompt user to calibrate the encoder
  calibrate();
  delay(1000);

  // Initialize the PID controller
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(-255, 255); // Full range of PWM and direction
  myPID.SetSampleTime(10);         // Sampling time in milliseconds
}

void loop()
{
  unsigned long currentTime = millis();

  // Read AS5600 data every 10 milliseconds
  if (currentTime - lastReadTime >= readInterval)
  {
    lastReadTime = currentTime;

    // Read raw angle and convert to degrees
    int rawAngle = as5600.rawAngle();
    float angleDegrees = (rawAngle / 4096.0) * 360.0;

    // Adjust angle based on calibration zero-point
    float adjustedAngle = angleDegrees - zeroAngle;

    // Accumulate adjusted angle for averaging
    angleSum += adjustedAngle;
    sampleCount++;
  }

  // Calculate and report average every 100 milliseconds
  if (currentTime - lastAverageTime >= averageInterval)
  {
    lastAverageTime = currentTime;

    // Calculate average angle
    float averageAngle = (sampleCount > 0) ? (float(angleSum) / sampleCount) : 0;

    // Use the average angle as the PID input
    input = averageAngle;

    // Compute the PID output
    myPID.Compute();

    // Apply the PID output to the motor using PWM
    setMotorOutput(output);

    // Print the angle and PID output for debugging
    Serial.print("Average Adjusted Angle: ");
    Serial.print(averageAngle);
    Serial.print(" | Desired Angle: ");
    Serial.print(setpoint);
    Serial.print(" | PID Output: ");
    Serial.println(output);

    // Reset sum and sample count for the next interval
    angleSum = 0;
    sampleCount = 0;
  }
}
