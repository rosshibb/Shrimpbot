#include <PID_v1.h>
#include <Arduino.h>
#include "AS5600.h"
#include <Wire.h>
// #include <thetaVals.h>
int thetaValues[] = {-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-53,-52,-52,-52,-52,-52,-52,-52,-52,-52,-50,-50,-50,-50,-50,-50,-49,-49,-49,-49,-48,-48,-48,-46,-46,-46,-45,-45,-45,-44,-44,-42,-42,-41,-41,-40,-40,-38,-38,-37,-36,-36,-34,-33,-33,-32,-30,-29,-29,-28,-27,-25,-24,-23,-21,-21,-20,-19,-17,-16,-15,-13,-12,-11,-9,-8,-5,-4,-3,-1,-0,1,3,4,5,7,9,11,12,13,15,16,17,19,20,21,23,25,27,28,29,30,32,32,33,34,36,37,38,40,41,41,42,44,44,45,46,46,48,48,49,49,50,50,50,52,52,52,53,53,53,53,53,53,53,53,53,53,53,52,52,52,50,50,50,49,49,48,48,46,46,45,44,44,42,41,40,40,38,37,36,34,33,32,30,29,28,27,25,24,23,21,20,19,17,16,15,13,12,11,8,7,5,4,3,1,-0,-1,-3,-4,-7,-8,-9,-11,-12,-13,-15,-16,-17,-19,-20,-21,-23,-23,-24,-25,-27,-28,-29,-29,-30,-32,-33,-33,-34,-36,-36,-37,-38,-38,-40,-40,-41,-41,-42,-42,-44,-44,-45,-45,-45,-46,-46,-46,-48,-48,-48,-49,-49,-49,-49,-50,-50,-50,-50,-50};
int pwmValues[] = {13,13,13,13,14,14,14,15,15,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,50,52,54,56,58,60,62,64,66,68,70,73,75,77,79,81,83,86,88,90,92,94,96,98,100,102,104,106,108,109,111,113,114,116,117,118,119,120,121,122,123,123,123,124,124,124,124,123,123,122,121,120,119,117,115,113,111,109,107,104,101,98,94,91,87,83,78,74,69,64,59,53,55,55,55,55,55,55,11,4,-3,-10,-55,-55,-55,-55,-55,-50,-57,-63,-69,-75,-81,-86,-91,-95,-100,-103,-107,-109,-112,-114,-115,-116,-58,-58,-58,-59,-59,-60,-61,-62,-64,-65,-67,-69,-71,-74,-76,-79,-82,-85,-88,-91,-95,-98,-102,-106,-110,-114,-119,-123,-128,-132,-137,-142,-147,-152,-156,-161,-166,-171,-176,-181,-186,-191,-196,-201,-206,-210,-215,-219,-223,-227,-231,-234,-238,-241,-244,-246,-248,-250,-252,-253,-254,-255,-255,-255,-254,-253,-252,-250,-247,-244,-241,-237,-232,-227,-222,-216,-209,-202,-195,-186,-178,-169,-159,-149,-138,-127,-115,-104,-91,-79,-66,-53,-55,-55,-14,-1,12,55,55,55,60,71,81,91,100,107,115,121,126,130,132,134,13};

AS5600 as5600;

// Pins for H-bridge control
const int positivePin = 11;  // PWM pin for forward direction
const int negativePin = 10; // PWM pin for reverse direction

int pwmPrescribe = 0;

// PID control variables
double setpoint = 0;         // Target position (relative to zero-point)
double input = 0;            // Current position (read from AS5600)
double output = 0;           // PID output for speed and direction

// PID tuning parameters //
// double Kp = 1.60, Ki = .0020, Kd = 0.0;
double Kp = 1.60, Ki = .00020, Kd = 0.0;

double t = 0.0;

const int loop_time_milli = 1250;
const int arraySize = sizeof(thetaValues)/sizeof(thetaValues[0]);
int millis_per_index = loop_time_milli/arraySize; 

double desiredAngle = 40;

// Initialize the PID controller
PID myPID(&input, &output, &desiredAngle, Kp, Ki, Kd, DIRECT);

///////////////////////////////////////////
// Desired angle relative to zero-point ///
///////////////////////////////////////////
 // Change this to set your desired angle

// Timing constants for AS5600 averaging
unsigned long readInterval_micro = 20;                            // Time between readings (um)
unsigned long readInterval_millis = 1;                             // Time between readings (ms)
unsigned long averageInterval_micro = 4000;                      // Time to calculate average (ms)
const double numSamples = averageInterval_micro / readInterval_micro; // Number of samples in each averaging period

// Variables for calibration and averaging
unsigned long lastReadTime_micro = 0;
unsigned long lastReadTime_milli = 0;
unsigned long lastAverageTime_micro = 0;
float angleSum = 0;
int sampleCount = 0;
int calAngle1 = 0, calAngle2 = 0; // Calibration points
float zeroAngle = 0;              // New zero-point in degrees

// Function to find the maximum absolute value in the array
int findMaxAbsValue(int* values, int size) {
  int maxAbsValue = 0;
  for (int i = 0; i < size; i++) {
    if (abs(values[i]) > maxAbsValue) {
      maxAbsValue = abs(values[i]);
    }
  }
  return maxAbsValue;
}

// Function to calibrate the encoder based on two known angles
void calibrate()
{
  delay(4000);
  Serial.println("Calibration: Rotate to first known angle and type 'y' to capture.");
  // while (Serial.read() != 'y')
  // {
  // } // Wait for 'y' input
  calAngle1 = as5600.rawAngle();
  Serial.print("Captured first angle: ");
  Serial.println(calAngle1);

  delay(500); // Brief pause for user to adjust position
  delay(4000);
  Serial.println("Calibration: Rotate to second known angle and type 'y' to capture.");
  // while (Serial.read() != 'y')
  // {
  // } // Wait for 'y' input
  calAngle2 = as5600.rawAngle();
  Serial.print("Captured second angle: ");
  Serial.println(calAngle2);

  // Calculate the midpoint between the two calibration points
  zeroAngle = ((calAngle1 + calAngle2) / 2.0) * (360.0 / 4096.0); // Convert to degrees
  Serial.print("Calibration complete. New zero-point angle: ");
  Serial.println(zeroAngle);

  // Set the PID setpoint relative to zero-point
  setpoint = desiredAngle;
  Serial.print("Desired angle (relative to zero-point): ");
  Serial.println(setpoint);
}

// Function to set the motor output
// void setMotorOutput(double pwmValue, int prescribedOutput)
void setMotorOutput(double pwmValue,int prescribedOutput)
{
  int pwmSignal = constrain(abs((int)pwmValue + prescribedOutput), 50, 255); // Ensure PWM is within range

  if (pwmValue > 0)
  {
    analogWrite(positivePin, pwmSignal); // Forward direction
    analogWrite(negativePin, 0);        // Stop reverse pin
  }
  else if (pwmValue < 0)
  {
    analogWrite(negativePin, pwmSignal); // Reverse direction
    analogWrite(positivePin, 0);        // Stop forward pin
  }
  else
  {
    analogWrite(positivePin, 0); // Stop both pins
    analogWrite(negativePin, 0);
  }
}

void setup()
{
  // Initialize serial communication
  Serial.begin(115200); 
  while (!Serial)
  {
  };

  // Initialize the AS5600 magnetometer
  Wire.begin();
  Serial.print("Beginning: ");
  Serial.println(as5600.begin(1)); // Set direction pin.

  int connected = as5600.isConnected();
  Serial.print("Connected: ");
  Serial.println(connected);

  // Initialize the H-bridge pins
  pinMode(positivePin, OUTPUT);
  pinMode(negativePin, OUTPUT);

  // Prompt user to calibrate the encoder
  calibrate();
  delay(1000);

  // Initialize the PID controller
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(-255, 255); // Full range of PWM and direction
  myPID.SetSampleTime(10);         // Sampling time in milliseconds
                                    // .SetSampleTime => How often, in milliseconds, the PID will be evaluated. (int>0) 

  double maxAbsValue = findMaxAbsValue(pwmValues, arraySize);

}

void loop()
{
  unsigned long currentTime_milli = millis();
  unsigned long currentTime_micro = micros();

  // Find corresponding prescribe PWM for the current time
  int array_time_milli = currentTime_milli % loop_time_milli;
  int current_index = array_time_milli/millis_per_index;
  int current_prescribed_PWM = pwmValues[current_index];

  t = (double)currentTime_milli/1000;
  // desiredAngle = 55*cos((t *15) / (2 * 3.14159) );
  desiredAngle = thetaValues[current_index];
  // Read AS5600 data every 10 milliseconds
  if (currentTime_micro - lastReadTime_micro >= readInterval_micro)
  {
    lastReadTime_micro = currentTime_micro;

    // Read raw angle and convert to degrees
    int rawAngle = as5600.rawAngle();
    float angleDegrees = (rawAngle / 4096.0) * 360.0;

    // Adjust angle based on calibration zero-point
    float adjustedAngle = angleDegrees - zeroAngle;
    if (adjustedAngle < -55)
    {
      adjustedAngle = -1*(adjustedAngle + 180);
    }
    // Serial.println(adjustedAngle);
    // Accumulate adjusted angle for averaging
   // if(adjustedAngle < -100 || adjustedAngle > 100)
   // {
   //   angleSum +=0;
   // }  
    //else
   // {
     angleSum += adjustedAngle;
     sampleCount++;
  //  }
    
   
  }

  // Calculate and report average every 100 milliseconds
  if (currentTime_micro - lastAverageTime_micro >= averageInterval_micro)
  {
    lastAverageTime_micro = currentTime_micro;

    // Calculate average angle
    float averageAngle = (sampleCount > 0) ? (float)angleSum / sampleCount : 0;

    // Use the average angle as the PID input
   input = averageAngle;
    // Print the angle and PID output for debugging
    Serial.print(t);
    Serial.print(",");
    // Serial.print("AAA: ");
    Serial.print(averageAngle);
    // Serial.print(" | Desired Angle: ");
    Serial.print(",");
    Serial.print(desiredAngle);
    Serial.print(",");
    Serial.print(current_prescribed_PWM);
    // Serial.print("| PID Out: ");
    Serial.print(",");
    Serial.println(output);
    //Serial.print("  | i: ");
    //Serial.print(i);
    //Serial.print("  | Array Size: ");
    //Serial.println(arraySize);
    // Reset sum and sample count for the next interval
    
    angleSum = 0;
    sampleCount = 0;
    // Serial.println(currentTime);
  }
  // Compute the PID output
  myPID.Compute();

  // Apply the PID output to the motor using PWM
  setMotorOutput(output, current_prescribed_PWM);

  
}
