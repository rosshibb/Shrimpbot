#include <PID_v1.h>
#include <Arduino.h>
#include "AS5600.h"
#include <Wire.h>
// #include <thetaVals.h>

AS5600 as5600;

// Pins for H-bridge control
const int positivePin = 11;  // PWM pin for forward direction
const int negativePin = 10; // PWM pin for reverse direction

int pwmPrescribe = 0;

// PID control variables
double setpoint = 0;         // Target position (relative to zero-point)
double input = 0;            // Current position (read from AS5600)
double output = 0;           // PID output for speed and direction

// PID tuning parameters //
// double Kp = 1.60, Ki = .0020, Kd = 0.0;
double Kp = 1.60, Ki = .00020, Kd = 0.0;

double t = 0.0;

double desiredAngle = 35;

// Initialize the PID controller
PID myPID(&input, &output, &desiredAngle, Kp, Ki, Kd, DIRECT);

///////////////////////////////////////////
// Desired angle relative to zero-point ///
///////////////////////////////////////////
 // Change this to set your desired angle

// Timing constants for AS5600 averaging
unsigned long readInterval_micro = 20;                            // Time between readings (um)
unsigned long readInterval_millis = 1;                           // Time between readings (ms)
unsigned long averageInterval_micro = 4000;                      // Time to calculate average (ms)
const double numSamples = averageInterval_micro / readInterval_micro; // Number of samples in each averaging period

// Variables for calibration and averaging
unsigned long lastReadTime_micro = 0;
unsigned long lastReadTime_milli = 0;
unsigned long lastAverageTime_micro = 0;
float angleSum = 0;
int sampleCount = 0;
int calAngle1 = 0, calAngle2 = 0; // Calibration points
float zeroAngle = 0;              // New zero-point in degrees

// Function to find the maximum absolute value in the array
int findMaxAbsValue(int* values, int size) {
  int maxAbsValue = 0;
  for (int i = 0; i < size; i++) {
    if (abs(values[i]) > maxAbsValue) {
      maxAbsValue = abs(values[i]);
    }
  }
  return maxAbsValue;
}

// Function to calibrate the encoder based on two known angles
void calibrate()
{
  delay(4000);
  Serial.println("Calibration: Rotate to first known angle and type 'y' to capture.");
  // while (Serial.read() != 'y')
  // {
  // } // Wait for 'y' input
  calAngle1 = as5600.rawAngle();
  Serial.print("Captured first angle: ");
  Serial.println(calAngle1);

  delay(500); // Brief pause for user to adjust position
  delay(4000);
  Serial.println("Calibration: Rotate to second known angle and type 'y' to capture.");
  // while (Serial.read() != 'y')
  // {
  // } // Wait for 'y' input
  calAngle2 = as5600.rawAngle();
  Serial.print("Captured second angle: ");
  Serial.println(calAngle2);

  // Calculate the midpoint between the two calibration points
  zeroAngle = ((calAngle1 + calAngle2) / 2.0) * (360.0 / 4096.0); // Convert to degrees
  Serial.print("Calibration complete. New zero-point angle: ");
  Serial.println(zeroAngle);

  // Set the PID setpoint relative to zero-point
  setpoint = desiredAngle;
  Serial.print("Desired angle (relative to zero-point): ");
  Serial.println(setpoint);
}

// Function to set the motor output
// void setMotorOutput(double pwmValue, int prescribedOutput)
void setMotorOutput(double pwmValue)
{
  int pwmSignal = constrain(abs((int)pwmValue), 50, 255); // Ensure PWM is within range

  if (pwmValue > 0)
  {
    analogWrite(positivePin, pwmSignal); // Forward direction
    analogWrite(negativePin, 0);        // Stop reverse pin
  }
  else if (pwmValue < 0)
  {
    analogWrite(negativePin, pwmSignal); // Reverse direction
    analogWrite(positivePin, 0);        // Stop forward pin
  }
  else
  {
    analogWrite(positivePin, 0); // Stop both pins
    analogWrite(negativePin, 0);
  }
}

void setup()
{
  // Initialize serial communication
  Serial.begin(115200); 
  while (!Serial)
  {
  };

  // Initialize the AS5600 magnetometer
  Wire.begin();
  Serial.print("Beginning: ");
  Serial.println(as5600.begin(1)); // Set direction pin.

  int connected = as5600.isConnected();
  Serial.print("Connected: ");
  Serial.println(connected);

  // Initialize the H-bridge pins
  pinMode(positivePin, OUTPUT);
  pinMode(negativePin, OUTPUT);

  // Prompt user to calibrate the encoder
  calibrate();
  delay(1000);

  // Initialize the PID controller
  myPID.SetMode(AUTOMATIC);
  myPID.SetOutputLimits(-255, 255); // Full range of PWM and direction
  myPID.SetSampleTime(10);         // Sampling time in milliseconds
                                    // .SetSampleTime => How often, in milliseconds, the PID will be evaluated. (int>0) 
}

void loop()
{
  unsigned long currentTime_milli = millis();
  unsigned long currentTime_micro = micros();
  t = (double)currentTime_milli/1000;
  // Read AS5600 data every 10 milliseconds
  if (currentTime_micro - lastReadTime_micro >= readInterval_micro)
  {
    lastReadTime_micro = currentTime_micro;

    // Read raw angle and convert to degrees
    int rawAngle = as5600.rawAngle();
    float angleDegrees = (rawAngle / 4096.0) * 360.0;

    // Adjust angle based on calibration zero-point
    float adjustedAngle = angleDegrees - zeroAngle;
    if (adjustedAngle < -55)
    {
      adjustedAngle = -1*(adjustedAngle + 180);
    }
    // Serial.println(adjustedAngle);
    // Accumulate adjusted angle for averaging
   // if(adjustedAngle < -100 || adjustedAngle > 100)
   // {
   //   angleSum +=0;
   // }  
    //else
   // {
     angleSum += adjustedAngle;
     sampleCount++;
  //  }
    
   
  }

  // Calculate and report average every 100 milliseconds
  if (currentTime_micro - lastAverageTime_micro >= averageInterval_micro)
  {
    lastAverageTime_micro = currentTime_micro;

    // Calculate average angle
    float averageAngle = (sampleCount > 0) ? (float)angleSum / sampleCount : 0;

    // Use the average angle as the PID input
   input = averageAngle;
    // Print the angle and PID output for debugging
    // Serial.print("AAA: ");
    // Serial.println(averageAngle);
    // Serial.print(" | Desired Angle: ");
    // Serial.print(desiredAngle);
    // Serial.print("| PID Out: ");
    // Serial.println(output);
    //Serial.print("  | i: ");
    //Serial.print(i);
    //Serial.print("  | Array Size: ");
    //Serial.println(arraySize);
    // Reset sum and sample count for the next interval
    Serial.print(t);
    Serial.print(",");
    // Serial.print("AAA: ");
    Serial.print(averageAngle);
    // Serial.print(" | Desired Angle: ");
    Serial.print(",");
    Serial.print(desiredAngle);
    // Serial.print(",");
    // Serial.print(current_prescribed_PWM);
    // Serial.print("| PID Out: ");
    Serial.print(",");
    Serial.println(output);
    
    angleSum = 0;
    sampleCount = 0;
    // Serial.println(currentTime);
  }
  // Compute the PID output
  myPID.Compute();

  // Apply the PID output to the motor using PWM
  setMotorOutput(output);

  
}
